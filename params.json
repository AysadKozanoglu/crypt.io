{"name":"secStore.js","tagline":"Encryption enabled browser storage","body":"### secStore.js\r\nProvides transparent symmetric encryption support for browser storage options.\r\n\r\n##Requirements:\r\n* SJCL libraries (optional - https://github.com/bitwiseshiftleft/sjcl)\r\n\r\n##Features:\r\n* HTML5 localStorage support\r\n* HTML5 sessionStorage support\r\n* Cookie support\r\n* AES encryption support\r\n* Quota support (4K for cookies and 5MB for HTML5 mechanisms)\r\n\r\n##Options:\r\n* _encrypt_: `{Boolean}` Provide transparent symmetric encryption of saved data\r\n* _data_: `{Mixed}` Object, string, array or booleans of data to be saved\r\n* _key_: `{String}` Unique identifier used as storage key\r\n* _passphrase_: `{String}` User supplied passphrase\r\n* _storage_: `{String}` Storage engine to use; local, session or cookies\r\n\r\n##Support:\r\nFound a bug? Want a feature added? General feedback or kudos? Please open\r\nan issue so I can address it. Thanks!\r\n\r\n##Installation:\r\nThree methods are available for setup and use; using bower, cloning & manual\r\n\r\n###Bower\r\nTo setup using bower\r\n\r\n```sh\r\n%> bower install secstore.js\r\n```\r\n\r\n###Clone\r\nTo setup using git\r\n\r\n```sh\r\n%> git clone --recursive https://github.com/jas-/secStore.js.git\r\n```\r\n\r\n###Manual\r\nCopy the [secStore.min.js](https://github.com/jas-/secStore.js/blob/master/secStore.min.js)\r\nand the [sjcl](https://github.com/bitwiseshiftleft/sjcl) libraries to your web project\r\nand include them like so.\r\n\r\n```html\r\n<script src=\"/path/to/sjcl.js\"></script>\r\n<script src=\"/path/to/secStore.min.js\"></script>\r\n```\r\n\r\n##Examples:\r\nHere are a few examples of use to get you started.\r\n\r\n###Default use\r\nSaving data...\r\n\r\n```javascript\r\nvar storage = new secStore\r\n  , options = {\r\n    encrypt: true,\r\n    data: {\r\n      key: 'some data that is somewhat private'\r\n    }\r\n  };\r\n\r\n\r\nstorage.set(options, function(err, results){\r\n  if (err) throw err;\r\n  console.log(results);\r\n});\r\n```\r\n\r\nRetrieving data...\r\n\r\n```javascript\r\nvar storage = new secStore\r\n  , options = {\r\n    encrypt: true\r\n  };\r\n\r\n\r\nstorage.get(options, function(err, results){\r\n  if (err) throw err;\r\n  console.log(results);\r\n});\r\n```\r\n\r\n###Storage option\r\nWant to use a different storage engine like the HTML5 sessionStorage feature?\r\n\r\n```javascript\r\nvar options = {\r\n  encrypt: true,\r\n  storage: 'session',\r\n  data: {\r\n    key: 'some data that is somewhat private'\r\n  }\r\n};\r\n```\r\n\r\nOr some depreciated cookies? This is the least tested option\r\n\r\n```javascript\r\nvar options = {\r\n  encrypt: true,\r\n  storage: 'cookies',\r\n  data: {\r\n    key: 'some data that is somewhat private'\r\n  }\r\n};\r\n```\r\n\r\n###Extra security\r\nWhile providing a transparent method of encryption for objects within\r\nthe client prevents the need for user interaction, in terms of security\r\nin the event of a same-origin, dom rebinding attack coupled with a man-\r\nin-the-middle scenario it would be more secure to prompt the user\r\nfor his/her passphrase. Here is an example of user input for the passphrase.\r\n\r\n```javascript\r\nvar pass = window.prompt(\"Please enter password...\", \"a custom password\");\r\n\r\nvar options = {\r\n  encrypt: true,\r\n  passphrase: pass,\r\n  data: {\r\n    key: 'some data that is somewhat private'\r\n  }\r\n};\r\n```\r\n\r\n###For the paranoid\r\nHere is a robust example of saving & retrieving data implementing a user\r\ndefined password based on their input while also using key stretching\r\ntechniques to further enhance the security of the key used as well as using\r\na tempoary storage option such as sessionStorage for the current authenticated\r\nsession. Of course wrapping this around a TLS/SSL connection is recommended.\r\n\r\n\r\nSaving data (please keep in mind that a static value for the salt is not recommended)\r\n\r\n```javascript\r\nvar pass = window.prompt(\"Enter password to protect saved data\", \"\");\r\n\r\nvar options = {\r\n  encrypt: true,\r\n  passphrase: sjcl.misc.pbkdf2(pass, \"salt\", 1000000, 256),\r\n  data: {\r\n    key: 'some data that is somewhat private'\r\n  }\r\n};\r\n```\r\n\r\n##Warning:\r\nI feel it is worth noting that while this plugin makes every\r\nattempt at providing a secure transparent method of saving &\r\nretieving encrypted data based on unique identifiers retrieved\r\nfrom the client browser, it is by no means a replacement for\r\na user specifying their own passphrase. See the 'Extra security'\r\nexample for this.\r\n\r\nFor the reasons behind this notice please research MITM ARP\r\npoisoning techniques coupled with use of the BeEF injection\r\nframework. This attack vector as well as browser plug-ins &\r\nJavaScript scriplets can expose the parameters used to create\r\na unique transparent key used by the browser.\r\n\r\nWhile this technique is possible, it is typically a low threat\r\nvector due to the technologies & knowledge necessary to exploit.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}